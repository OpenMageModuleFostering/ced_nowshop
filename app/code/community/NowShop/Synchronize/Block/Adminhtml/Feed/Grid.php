<?php /** * NowShop * * NOTICE OF LICENS * * This source file is subject to the Open Software License (OSL 3.0) * that is bundled with this package in the file LICENSE.txt. * It is also available through the world-wide-web at this URL: * http://opensource.org/licenses/osl-3.0.php * If you did not receive a copy of the license and are unable to * obtain it through the world-wide-web, please send an email * to support@nowshop.com so we can send you a copy immediately. * * @category    NowShop * @package     NowShop_Synchronize * @author 		Asheesh Singh<asheeshsingh@cedcoss.com> * @copyright   Copyright NowShop 2012 - 2014 (http://nowshop.com/) * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0) */ /** * Block for NowShop feed grid */ class NowShop_Synchronize_Block_Adminhtml_Feed_Grid extends Mage_Adminhtml_Block_Widget_Grid{	public function __construct()	{		parent::__construct();		$this->setId('nowshopFeedGrid');		$this->setDefaultSort('entity_id');		$this->setDefaultDir('DESC');		$this->setSaveParametersInSession(true);        $this->setUseAjax(true);        $this->setVarNameFilter('productfeed_filter');		$this->setTemplate('nowshop/grid.phtml');	}		protected function _getStore()    {        $storeId = (int) $this->getRequest()->getParam('store', 0);        return Mage::app()->getStore($storeId);    }    protected function _prepareCollection()    {		        $store = $this->_getStore();        $collection = Mage::getModel('catalog/product')->getCollection()            ->addAttributeToSelect('sku')            ->addAttributeToSelect('name')            ->addAttributeToSelect('attribute_set_id')            ->addAttributeToSelect('type_id');        if (Mage::helper('catalog')->isModuleEnabled('Mage_CatalogInventory')) {            $collection->joinField('qty',                'cataloginventory/stock_item',                'qty',                'product_id=entity_id',                '{{table}}.stock_id=1',                'left');        }				        if ($store->getId()) {            $adminStore = Mage_Core_Model_App::ADMIN_STORE_ID;            $collection->addStoreFilter($store);            $collection->joinAttribute(                'name',                'catalog_product/name',                'entity_id',                null,                'inner',                $adminStore            );            $collection->joinAttribute(                'custom_name',                'catalog_product/name',                'entity_id',                null,                'inner',                $store->getId()            );            $collection->joinAttribute(                'status',                'catalog_product/status',                'entity_id',                null,                'inner',                $store->getId()            );            $collection->joinAttribute(                'visibility',                'catalog_product/visibility',                'entity_id',                null,                'inner',                $store->getId()            );            $collection->joinAttribute(                'price',                'catalog_product/price',                'entity_id',                null,                'left',                $store->getId()            );        }        else {            $collection->addAttributeToSelect('price');            $collection->joinAttribute('status', 'catalog_product/status', 'entity_id', null, 'inner');            $collection->joinAttribute('visibility', 'catalog_product/visibility', 'entity_id', null, 'inner');        }		$collection->addAttributeToFilter('type_id',array('in'=>array('simple','configurable')));		$tableName = Mage::getSingleton('core/resource')->getTableName('nowshop/feed');		$collection ->getSelect()->joinLeft(array('feed'=>$tableName), 'e.entity_id = feed.product_id', array('nowshop'=> 'feed.status','requiredrelisting'=>'feed.updated_at'));        $this->setCollection($collection);        parent::_prepareCollection();        $this->getCollection()->addWebsiteNamesToResult();        return $this;    }    protected function _addColumnFilterToCollection($column)    {        if ($this->getCollection()) {            if ($column->getId() == 'websites') {                $this->getCollection()->joinField('websites',                    'catalog/product_website',                    'website_id',                    'product_id=entity_id',                    null,                    'left'					);            }        }        return parent::_addColumnFilterToCollection($column);    }    protected function _prepareColumns()    {        $this->addColumn('entity_id',            array(                'header'=> Mage::helper('catalog')->__('ID'),                'width' => '50px',                'type'  => 'number',                'index' => 'entity_id',        ));        $this->addColumn('name',            array(                'header'=> Mage::helper('catalog')->__('Name'),                'index' => 'name',        ));        $store = $this->_getStore();        if ($store->getId()) {            $this->addColumn('custom_name',                array(                    'header'=> Mage::helper('catalog')->__('Name in %s', $store->getName()),                    'index' => 'custom_name',            ));        }        $this->addColumn('type',            array(                'header'=> Mage::helper('catalog')->__('Type'),                'width' => '60px',                'index' => 'type_id',                'type'  => 'options',                'options' => array(									'simple'=>Mage::helper('catalog')->__('Simple Product'),/* Mage::getSingleton('catalog/product_type')->getOptionArray() */									'configurable'=>Mage::helper('catalog')->__('Configurable Product'),							),        ));        $sets = Mage::getResourceModel('eav/entity_attribute_set_collection')            ->setEntityTypeFilter(Mage::getModel('catalog/product')->getResource()->getTypeId())            ->load()            ->toOptionHash();        $this->addColumn('set_name',            array(                'header'=> Mage::helper('catalog')->__('Attrib. Set Name'),                'width' => '100px',                'index' => 'attribute_set_id',                'type'  => 'options',                'options' => $sets,        ));        $this->addColumn('sku',            array(                'header'=> Mage::helper('catalog')->__('SKU'),                'width' => '80px',                'index' => 'sku',        ));        $store = $this->_getStore();        $this->addColumn('price',            array(                'header'=> Mage::helper('catalog')->__('Price'),                'type'  => 'price',                'currency_code' => $store->getBaseCurrency()->getCode(),                'index' => 'price',        ));        if (Mage::helper('catalog')->isModuleEnabled('Mage_CatalogInventory')) {            $this->addColumn('qty',                array(                    'header'=> Mage::helper('catalog')->__('Qty'),                    'width' => '100px',                    'type'  => 'number',                    'index' => 'qty',            ));        }        $this->addColumn('visibility',            array(                'header'=> Mage::helper('catalog')->__('Visibility'),                'width' => '70px',                'index' => 'visibility',                'type'  => 'options',                'options' => Mage::getModel('catalog/product_visibility')->getOptionArray(),        ));        $this->addColumn('status',            array(                'header'=> Mage::helper('catalog')->__('Status'),                'width' => '70px',                'index' => 'status',				'sortable'  => false,                'type'  => 'options',                'options' => Mage::getSingleton('catalog/product_status')->getOptionArray(),        ));        if (!Mage::app()->isSingleStoreMode()) {            $this->addColumn('websites',                array(                    'header'=> Mage::helper('catalog')->__('Websites'),                    'width' => '100px',                    'sortable'  => false,                    'index'     => 'websites',                    'type'      => 'options',                    'options'   => Mage::getModel('core/website')->getCollection()->toOptionHash(),            ));        }				$this->addColumn('requiredrelisting',            array(                'header'=> Mage::helper('nowshop')->__('Re-listing required?'),                'width' => '70px',                'index' => 'requiredrelisting',                'type'  => 'options',				'align' => 'center',				'sortable'  => false,                'options' => array(1=>Mage::helper('nowshop')->__('Yes'),-1=>Mage::helper('nowshop')->__('No')),				'renderer'  => 'NowShop_Synchronize_Block_Adminhtml_Feed_Renderer_Relisted',				'filter_condition_callback' => array($this, '_reListedFilter'),        ));        $this->addColumn('nowshop',            array(                'header'=> Mage::helper('nowshop')->__('On NowShop'),                'width' => '70px',                'index' => 'nowshop',                'type'  => 'options',				'align' => 'center',				'sortable'  => false,                'options' => Mage::helper('nowshop')->getStatuses(),				'renderer'  => 'NowShop_Synchronize_Block_Adminhtml_Feed_Renderer_Listed',				'filter_condition_callback' => array($this, '_listedFilter'),        ));        return parent::_prepareColumns();    }		protected function _listedFilter($collection, $column){		if (!$value = $column->getFilter()->getValue()) {			return $this;		}		if($value==1){			$collection->addFieldToFilter('nowshop',array('eq'=>1));		}else{			$feed = Mage::getModel('nowshop/feed')->getCollection();			$feed->getSelect()->columns(												array('product_ids' => new Zend_Db_Expr(													"IFNULL(GROUP_CONCAT(DISTINCT main_table.product_id SEPARATOR ','), '')"											)));			$feed = $feed->getFirstItem()->load()->getData('product_ids');			$feed = explode(',',$feed);			$collection->addFieldToFilter('entity_id',array('nin'=>$feed));		}		return $this;	}		protected function _reListedFilter($collection, $column){		if (!$value = $column->getFilter()->getValue()) {			return $this;		}		if($value==1){			$where .= 'e.updated_at>=feed.updated_at';		}else{			$where .= 'e.updated_at<feed.updated_at';		}		$collection->getSelect()->where($where);		return $this;	}    protected function _prepareMassaction()    {        $this->setMassactionIdField('entity_id');        $this->getMassactionBlock()->setFormFieldName('product');        $statuses = array(							'add'=>Mage::helper('nowshop')->__('Add To Feed'),						);        array_unshift($statuses, array('label'=>'', 'value'=>''));        $this->getMassactionBlock()->addItem('onnowshop', array(             'label'=> Mage::helper('nowshop')->__('On NowShop'),             'url'  => $this->getUrl('*/*/massStatus', array('_current'=>true)),             'additional' => array(                    'visibility' => array(                         'name' => 'onnowshop',                         'type' => 'select',                         'class' => 'required-entry',                         'label' => Mage::helper('catalog')->__('Status'),                         'values' => $statuses                     )             )        ));        return $this;    }    public function getGridUrl()    {        return $this->getUrl('*/*/grid', array('_secure'=>true, '_current'=>true));    }    public function getRowUrl($row)    {        return "javascript:void(0)";    }		public function manualInit(){        $this->_prepareGrid();		$this->getCollection()->getSelect()->limit();        $this->getCollection()->setPageSize(0);        $this->getCollection()->load();        $this->_afterLoadCollection();		return $this;    }		public function getStore(){		return $this->_getStore();    	}}